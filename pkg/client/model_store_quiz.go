/*
go-quiz

This is the API documentation for go-quiz, a simple Quiz API allowing users to obtain quizzes, answer the questions and see their results compared to other users.

API version: 1.0
Contact: dtslubbersen@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StoreQuiz type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreQuiz{}

// StoreQuiz struct for StoreQuiz
type StoreQuiz struct {
	Description *string `json:"description,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Questions []StoreQuestion `json:"questions,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewStoreQuiz instantiates a new StoreQuiz object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreQuiz() *StoreQuiz {
	this := StoreQuiz{}
	return &this
}

// NewStoreQuizWithDefaults instantiates a new StoreQuiz object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreQuizWithDefaults() *StoreQuiz {
	this := StoreQuiz{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StoreQuiz) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreQuiz) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StoreQuiz) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StoreQuiz) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StoreQuiz) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreQuiz) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StoreQuiz) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *StoreQuiz) SetId(v int32) {
	o.Id = &v
}

// GetQuestions returns the Questions field value if set, zero value otherwise.
func (o *StoreQuiz) GetQuestions() []StoreQuestion {
	if o == nil || IsNil(o.Questions) {
		var ret []StoreQuestion
		return ret
	}
	return o.Questions
}

// GetQuestionsOk returns a tuple with the Questions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreQuiz) GetQuestionsOk() ([]StoreQuestion, bool) {
	if o == nil || IsNil(o.Questions) {
		return nil, false
	}
	return o.Questions, true
}

// HasQuestions returns a boolean if a field has been set.
func (o *StoreQuiz) HasQuestions() bool {
	if o != nil && !IsNil(o.Questions) {
		return true
	}

	return false
}

// SetQuestions gets a reference to the given []StoreQuestion and assigns it to the Questions field.
func (o *StoreQuiz) SetQuestions(v []StoreQuestion) {
	o.Questions = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *StoreQuiz) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreQuiz) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *StoreQuiz) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *StoreQuiz) SetTitle(v string) {
	o.Title = &v
}

func (o StoreQuiz) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreQuiz) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Questions) {
		toSerialize["questions"] = o.Questions
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableStoreQuiz struct {
	value *StoreQuiz
	isSet bool
}

func (v NullableStoreQuiz) Get() *StoreQuiz {
	return v.value
}

func (v *NullableStoreQuiz) Set(val *StoreQuiz) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreQuiz) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreQuiz) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreQuiz(val *StoreQuiz) *NullableStoreQuiz {
	return &NullableStoreQuiz{value: val, isSet: true}
}

func (v NullableStoreQuiz) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreQuiz) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


