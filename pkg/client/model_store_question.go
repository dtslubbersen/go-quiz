/*
go-quiz

This is the API documentation for go-quiz, a simple Quiz API allowing users to obtain quizzes, answer the questions and see their results compared to other users.

API version: 1.0
Contact: dtslubbersen@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StoreQuestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreQuestion{}

// StoreQuestion struct for StoreQuestion
type StoreQuestion struct {
	Answers []string `json:"answers,omitempty"`
	CorrectAnswerIndex *int32 `json:"correct_answer_index,omitempty"`
	Id *int32 `json:"id,omitempty"`
	QuizId *int32 `json:"quiz_id,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewStoreQuestion instantiates a new StoreQuestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreQuestion() *StoreQuestion {
	this := StoreQuestion{}
	return &this
}

// NewStoreQuestionWithDefaults instantiates a new StoreQuestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreQuestionWithDefaults() *StoreQuestion {
	this := StoreQuestion{}
	return &this
}

// GetAnswers returns the Answers field value if set, zero value otherwise.
func (o *StoreQuestion) GetAnswers() []string {
	if o == nil || IsNil(o.Answers) {
		var ret []string
		return ret
	}
	return o.Answers
}

// GetAnswersOk returns a tuple with the Answers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreQuestion) GetAnswersOk() ([]string, bool) {
	if o == nil || IsNil(o.Answers) {
		return nil, false
	}
	return o.Answers, true
}

// HasAnswers returns a boolean if a field has been set.
func (o *StoreQuestion) HasAnswers() bool {
	if o != nil && !IsNil(o.Answers) {
		return true
	}

	return false
}

// SetAnswers gets a reference to the given []string and assigns it to the Answers field.
func (o *StoreQuestion) SetAnswers(v []string) {
	o.Answers = v
}

// GetCorrectAnswerIndex returns the CorrectAnswerIndex field value if set, zero value otherwise.
func (o *StoreQuestion) GetCorrectAnswerIndex() int32 {
	if o == nil || IsNil(o.CorrectAnswerIndex) {
		var ret int32
		return ret
	}
	return *o.CorrectAnswerIndex
}

// GetCorrectAnswerIndexOk returns a tuple with the CorrectAnswerIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreQuestion) GetCorrectAnswerIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.CorrectAnswerIndex) {
		return nil, false
	}
	return o.CorrectAnswerIndex, true
}

// HasCorrectAnswerIndex returns a boolean if a field has been set.
func (o *StoreQuestion) HasCorrectAnswerIndex() bool {
	if o != nil && !IsNil(o.CorrectAnswerIndex) {
		return true
	}

	return false
}

// SetCorrectAnswerIndex gets a reference to the given int32 and assigns it to the CorrectAnswerIndex field.
func (o *StoreQuestion) SetCorrectAnswerIndex(v int32) {
	o.CorrectAnswerIndex = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StoreQuestion) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreQuestion) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StoreQuestion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *StoreQuestion) SetId(v int32) {
	o.Id = &v
}

// GetQuizId returns the QuizId field value if set, zero value otherwise.
func (o *StoreQuestion) GetQuizId() int32 {
	if o == nil || IsNil(o.QuizId) {
		var ret int32
		return ret
	}
	return *o.QuizId
}

// GetQuizIdOk returns a tuple with the QuizId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreQuestion) GetQuizIdOk() (*int32, bool) {
	if o == nil || IsNil(o.QuizId) {
		return nil, false
	}
	return o.QuizId, true
}

// HasQuizId returns a boolean if a field has been set.
func (o *StoreQuestion) HasQuizId() bool {
	if o != nil && !IsNil(o.QuizId) {
		return true
	}

	return false
}

// SetQuizId gets a reference to the given int32 and assigns it to the QuizId field.
func (o *StoreQuestion) SetQuizId(v int32) {
	o.QuizId = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *StoreQuestion) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreQuestion) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *StoreQuestion) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *StoreQuestion) SetValue(v string) {
	o.Value = &v
}

func (o StoreQuestion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreQuestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Answers) {
		toSerialize["answers"] = o.Answers
	}
	if !IsNil(o.CorrectAnswerIndex) {
		toSerialize["correct_answer_index"] = o.CorrectAnswerIndex
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.QuizId) {
		toSerialize["quiz_id"] = o.QuizId
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableStoreQuestion struct {
	value *StoreQuestion
	isSet bool
}

func (v NullableStoreQuestion) Get() *StoreQuestion {
	return v.value
}

func (v *NullableStoreQuestion) Set(val *StoreQuestion) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreQuestion(val *StoreQuestion) *NullableStoreQuestion {
	return &NullableStoreQuestion{value: val, isSet: true}
}

func (v NullableStoreQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


