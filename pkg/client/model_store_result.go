/*
go-quiz

This is the API documentation for go-quiz, a simple Quiz API allowing users to obtain quizzes, answer the questions and see their results compared to other users.

API version: 1.0
Contact: dtslubbersen@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StoreResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreResult{}

// StoreResult struct for StoreResult
type StoreResult struct {
	Id *int32 `json:"id,omitempty"`
	QuestionCount *int32 `json:"question_count,omitempty"`
	QuizId *int32 `json:"quiz_id,omitempty"`
	UserId *int32 `json:"user_id,omitempty"`
	UserPercentile *int32 `json:"user_percentile,omitempty"`
	UserScore *int32 `json:"user_score,omitempty"`
}

// NewStoreResult instantiates a new StoreResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreResult() *StoreResult {
	this := StoreResult{}
	return &this
}

// NewStoreResultWithDefaults instantiates a new StoreResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreResultWithDefaults() *StoreResult {
	this := StoreResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StoreResult) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreResult) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StoreResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *StoreResult) SetId(v int32) {
	o.Id = &v
}

// GetQuestionCount returns the QuestionCount field value if set, zero value otherwise.
func (o *StoreResult) GetQuestionCount() int32 {
	if o == nil || IsNil(o.QuestionCount) {
		var ret int32
		return ret
	}
	return *o.QuestionCount
}

// GetQuestionCountOk returns a tuple with the QuestionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreResult) GetQuestionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.QuestionCount) {
		return nil, false
	}
	return o.QuestionCount, true
}

// HasQuestionCount returns a boolean if a field has been set.
func (o *StoreResult) HasQuestionCount() bool {
	if o != nil && !IsNil(o.QuestionCount) {
		return true
	}

	return false
}

// SetQuestionCount gets a reference to the given int32 and assigns it to the QuestionCount field.
func (o *StoreResult) SetQuestionCount(v int32) {
	o.QuestionCount = &v
}

// GetQuizId returns the QuizId field value if set, zero value otherwise.
func (o *StoreResult) GetQuizId() int32 {
	if o == nil || IsNil(o.QuizId) {
		var ret int32
		return ret
	}
	return *o.QuizId
}

// GetQuizIdOk returns a tuple with the QuizId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreResult) GetQuizIdOk() (*int32, bool) {
	if o == nil || IsNil(o.QuizId) {
		return nil, false
	}
	return o.QuizId, true
}

// HasQuizId returns a boolean if a field has been set.
func (o *StoreResult) HasQuizId() bool {
	if o != nil && !IsNil(o.QuizId) {
		return true
	}

	return false
}

// SetQuizId gets a reference to the given int32 and assigns it to the QuizId field.
func (o *StoreResult) SetQuizId(v int32) {
	o.QuizId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *StoreResult) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreResult) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *StoreResult) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *StoreResult) SetUserId(v int32) {
	o.UserId = &v
}

// GetUserPercentile returns the UserPercentile field value if set, zero value otherwise.
func (o *StoreResult) GetUserPercentile() int32 {
	if o == nil || IsNil(o.UserPercentile) {
		var ret int32
		return ret
	}
	return *o.UserPercentile
}

// GetUserPercentileOk returns a tuple with the UserPercentile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreResult) GetUserPercentileOk() (*int32, bool) {
	if o == nil || IsNil(o.UserPercentile) {
		return nil, false
	}
	return o.UserPercentile, true
}

// HasUserPercentile returns a boolean if a field has been set.
func (o *StoreResult) HasUserPercentile() bool {
	if o != nil && !IsNil(o.UserPercentile) {
		return true
	}

	return false
}

// SetUserPercentile gets a reference to the given int32 and assigns it to the UserPercentile field.
func (o *StoreResult) SetUserPercentile(v int32) {
	o.UserPercentile = &v
}

// GetUserScore returns the UserScore field value if set, zero value otherwise.
func (o *StoreResult) GetUserScore() int32 {
	if o == nil || IsNil(o.UserScore) {
		var ret int32
		return ret
	}
	return *o.UserScore
}

// GetUserScoreOk returns a tuple with the UserScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreResult) GetUserScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.UserScore) {
		return nil, false
	}
	return o.UserScore, true
}

// HasUserScore returns a boolean if a field has been set.
func (o *StoreResult) HasUserScore() bool {
	if o != nil && !IsNil(o.UserScore) {
		return true
	}

	return false
}

// SetUserScore gets a reference to the given int32 and assigns it to the UserScore field.
func (o *StoreResult) SetUserScore(v int32) {
	o.UserScore = &v
}

func (o StoreResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.QuestionCount) {
		toSerialize["question_count"] = o.QuestionCount
	}
	if !IsNil(o.QuizId) {
		toSerialize["quiz_id"] = o.QuizId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.UserPercentile) {
		toSerialize["user_percentile"] = o.UserPercentile
	}
	if !IsNil(o.UserScore) {
		toSerialize["user_score"] = o.UserScore
	}
	return toSerialize, nil
}

type NullableStoreResult struct {
	value *StoreResult
	isSet bool
}

func (v NullableStoreResult) Get() *StoreResult {
	return v.value
}

func (v *NullableStoreResult) Set(val *StoreResult) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreResult) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreResult(val *StoreResult) *NullableStoreResult {
	return &NullableStoreResult{value: val, isSet: true}
}

func (v NullableStoreResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


