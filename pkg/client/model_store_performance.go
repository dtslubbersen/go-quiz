/*
go-quiz

This is the API documentation for go-quiz, a simple Quiz API allowing users to obtain quizzes, answer the questions and see their results compared to other users.

API version: 1.0
Contact: dtslubbersen@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StorePerformance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorePerformance{}

// StorePerformance struct for StorePerformance
type StorePerformance struct {
	CorrectAnswersCount *map[string]int32 `json:"correct_answers_count,omitempty"`
	UsersTakenCount     *int32            `json:"users_taken_count,omitempty"`
}

// NewStorePerformance instantiates a new StorePerformance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorePerformance() *StorePerformance {
	this := StorePerformance{}
	return &this
}

// NewStorePerformanceWithDefaults instantiates a new StorePerformance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorePerformanceWithDefaults() *StorePerformance {
	this := StorePerformance{}
	return &this
}

// GetCorrectAnswersCount returns the CorrectAnswersCount field value if set, zero value otherwise.
func (o *StorePerformance) GetCorrectAnswersCount() map[string]int32 {
	if o == nil || IsNil(o.CorrectAnswersCount) {
		var ret map[string]int32
		return ret
	}
	return *o.CorrectAnswersCount
}

// GetCorrectAnswersCountOk returns a tuple with the CorrectAnswersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorePerformance) GetCorrectAnswersCountOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.CorrectAnswersCount) {
		return nil, false
	}
	return o.CorrectAnswersCount, true
}

// HasCorrectAnswersCount returns a boolean if a field has been set.
func (o *StorePerformance) HasCorrectAnswersCount() bool {
	if o != nil && !IsNil(o.CorrectAnswersCount) {
		return true
	}

	return false
}

// SetCorrectAnswersCount gets a reference to the given map[string]int32 and assigns it to the CorrectAnswersCount field.
func (o *StorePerformance) SetCorrectAnswersCount(v map[string]int32) {
	o.CorrectAnswersCount = &v
}

// GetUsersTakenCount returns the UsersTakenCount field value if set, zero value otherwise.
func (o *StorePerformance) GetUsersTakenCount() int32 {
	if o == nil || IsNil(o.UsersTakenCount) {
		var ret int32
		return ret
	}
	return *o.UsersTakenCount
}

// GetUsersTakenCountOk returns a tuple with the UsersTakenCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorePerformance) GetUsersTakenCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UsersTakenCount) {
		return nil, false
	}
	return o.UsersTakenCount, true
}

// HasUsersTakenCount returns a boolean if a field has been set.
func (o *StorePerformance) HasUsersTakenCount() bool {
	if o != nil && !IsNil(o.UsersTakenCount) {
		return true
	}

	return false
}

// SetUsersTakenCount gets a reference to the given int32 and assigns it to the UsersTakenCount field.
func (o *StorePerformance) SetUsersTakenCount(v int32) {
	o.UsersTakenCount = &v
}

func (o StorePerformance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorePerformance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CorrectAnswersCount) {
		toSerialize["correct_answers_count"] = o.CorrectAnswersCount
	}
	if !IsNil(o.UsersTakenCount) {
		toSerialize["users_taken_count"] = o.UsersTakenCount
	}
	return toSerialize, nil
}

type NullableStorePerformance struct {
	value *StorePerformance
	isSet bool
}

func (v NullableStorePerformance) Get() *StorePerformance {
	return v.value
}

func (v *NullableStorePerformance) Set(val *StorePerformance) {
	v.value = val
	v.isSet = true
}

func (v NullableStorePerformance) IsSet() bool {
	return v.isSet
}

func (v *NullableStorePerformance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorePerformance(val *StorePerformance) *NullableStorePerformance {
	return &NullableStorePerformance{value: val, isSet: true}
}

func (v NullableStorePerformance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorePerformance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
