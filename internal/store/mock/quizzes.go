// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dtslubbersen/go-quiz/internal/store (interfaces: QuizStore)
//
// Generated by this command:
//
//	mockgen -package store -destination internal/store/mock/quizzes.go github.com/dtslubbersen/go-quiz/internal/store QuizStore
//

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	store "github.com/dtslubbersen/go-quiz/internal/store"
	gomock "go.uber.org/mock/gomock"
)

// MockQuizStore is a mock of QuizStore interface.
type MockQuizStore struct {
	ctrl     *gomock.Controller
	recorder *MockQuizStoreMockRecorder
	isgomock struct{}
}

// MockQuizStoreMockRecorder is the mock recorder for MockQuizStore.
type MockQuizStoreMockRecorder struct {
	mock *MockQuizStore
}

// NewMockQuizStore creates a new mock instance.
func NewMockQuizStore(ctrl *gomock.Controller) *MockQuizStore {
	mock := &MockQuizStore{ctrl: ctrl}
	mock.recorder = &MockQuizStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuizStore) EXPECT() *MockQuizStoreMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockQuizStore) GetAll() ([]*store.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*store.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockQuizStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockQuizStore)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockQuizStore) GetById(arg0 store.QuizId) (*store.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*store.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockQuizStoreMockRecorder) GetById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockQuizStore)(nil).GetById), arg0)
}

// Update mocks base method.
func (m *MockQuizStore) Update(arg0 *store.Quiz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockQuizStoreMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockQuizStore)(nil).Update), arg0)
}
