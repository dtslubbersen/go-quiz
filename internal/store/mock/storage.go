// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dtslubbersen/go-quiz/internal/store (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -package store -destination internal/store/mock/storage.go github.com/dtslubbersen/go-quiz/internal/store Storage
//

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	store "github.com/dtslubbersen/go-quiz/internal/store"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Questions mocks base method.
func (m *MockStorage) Questions() store.QuestionStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Questions")
	ret0, _ := ret[0].(store.QuestionStore)
	return ret0
}

// Questions indicates an expected call of Questions.
func (mr *MockStorageMockRecorder) Questions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Questions", reflect.TypeOf((*MockStorage)(nil).Questions))
}

// Quizzes mocks base method.
func (m *MockStorage) Quizzes() store.QuizStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quizzes")
	ret0, _ := ret[0].(store.QuizStore)
	return ret0
}

// Quizzes indicates an expected call of Quizzes.
func (mr *MockStorageMockRecorder) Quizzes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quizzes", reflect.TypeOf((*MockStorage)(nil).Quizzes))
}

// Results mocks base method.
func (m *MockStorage) Results() store.ResultStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(store.ResultStore)
	return ret0
}

// Results indicates an expected call of Results.
func (mr *MockStorageMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockStorage)(nil).Results))
}

// UserAnswers mocks base method.
func (m *MockStorage) UserAnswers() store.UserAnswerStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAnswers")
	ret0, _ := ret[0].(store.UserAnswerStore)
	return ret0
}

// UserAnswers indicates an expected call of UserAnswers.
func (mr *MockStorageMockRecorder) UserAnswers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAnswers", reflect.TypeOf((*MockStorage)(nil).UserAnswers))
}

// Users mocks base method.
func (m *MockStorage) Users() store.UserStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(store.UserStore)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockStorageMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockStorage)(nil).Users))
}
