// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dtslubbersen/go-quiz/internal/store (interfaces: QuestionStore)
//
// Generated by this command:
//
//	mockgen -package store -destination internal/store/mock/questions.go github.com/dtslubbersen/go-quiz/internal/store QuestionStore
//

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	store "github.com/dtslubbersen/go-quiz/internal/store"
	gomock "go.uber.org/mock/gomock"
)

// MockQuestionStore is a mock of QuestionStore interface.
type MockQuestionStore struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionStoreMockRecorder
	isgomock struct{}
}

// MockQuestionStoreMockRecorder is the mock recorder for MockQuestionStore.
type MockQuestionStoreMockRecorder struct {
	mock *MockQuestionStore
}

// NewMockQuestionStore creates a new mock instance.
func NewMockQuestionStore(ctrl *gomock.Controller) *MockQuestionStore {
	mock := &MockQuestionStore{ctrl: ctrl}
	mock.recorder = &MockQuestionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionStore) EXPECT() *MockQuestionStoreMockRecorder {
	return m.recorder
}

// GetByQuizId mocks base method.
func (m *MockQuestionStore) ListQuestionsByQuizId(arg0 store.QuizId) ([]*store.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuestionsByQuizId", arg0)
	ret0, _ := ret[0].([]*store.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByQuizId indicates an expected call of GetByQuizId.
func (mr *MockQuestionStoreMockRecorder) GetByQuizId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestionsByQuizId", reflect.TypeOf((*MockQuestionStore)(nil).ListQuestionsByQuizId), arg0)
}
