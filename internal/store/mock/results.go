// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dtslubbersen/go-quiz/internal/store (interfaces: ResultStore)
//
// Generated by this command:
//
//	mockgen -package store -destination internal/store/mock/results.go github.com/dtslubbersen/go-quiz/internal/store ResultStore
//

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	store "github.com/dtslubbersen/go-quiz/internal/store"
	gomock "go.uber.org/mock/gomock"
)

// MockResultStore is a mock of ResultStore interface.
type MockResultStore struct {
	ctrl     *gomock.Controller
	recorder *MockResultStoreMockRecorder
	isgomock struct{}
}

// MockResultStoreMockRecorder is the mock recorder for MockResultStore.
type MockResultStoreMockRecorder struct {
	mock *MockResultStore
}

// NewMockResultStore creates a new mock instance.
func NewMockResultStore(ctrl *gomock.Controller) *MockResultStore {
	mock := &MockResultStore{ctrl: ctrl}
	mock.recorder = &MockResultStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultStore) EXPECT() *MockResultStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockResultStore) Add(arg0 *store.Result) (*store.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(*store.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockResultStoreMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockResultStore)(nil).Add), arg0)
}

// GetByQuizAndUserId mocks base method.
func (m *MockResultStore) GetByQuizAndUserId(arg0 store.QuizId, arg1 store.UserId) (*store.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByQuizAndUserId", arg0, arg1)
	ret0, _ := ret[0].(*store.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByQuizAndUserId indicates an expected call of GetByQuizAndUserId.
func (mr *MockResultStoreMockRecorder) GetByQuizAndUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByQuizAndUserId", reflect.TypeOf((*MockResultStore)(nil).GetByQuizAndUserId), arg0, arg1)
}
